//! account: alice
//! account: bob

//! sender: alice
module One {
  import 0x0.LibraCoin;

  resource Offer {
    counter_party: address,
  }

  resource Signed {
    // The creator of the initial contract.
    holder: address,
    coin: LibraCoin.T,
  }

  // Creates the contract offer (as a resource) and moves it to the transaction sender's account.
  public create_offer(counter_party: address) {
    let contract_offer: Self.Offer;

    contract_offer = Offer {
      address: move(counter_party);
    }

    // Publish the contract offer under the transaction sender's account
    // Note: Maybe it should be the other way around, the counter-party owns the offer
    //       and the holder will own the signed contract. This does require finding out how to
    //       move the resource to a specific address... Scout the Libra tests to find method that might do this.
    move_to_sender<Offer>(move(contract_offer));
    return;
  }

  // Signs the contract offer, creating a signed contract resource.
  // holder: address of the offer holder.
  public sign_offer(holder: address, coin: LibraCoin.T) {
    let offer: Self.Offer;
    let signed: Self.Signed;
    let counter_party: address;

    // Move the contract offer resource from the holder to the variable offer.
    // If there is no resource of type Offer held by the holder address, this transaction will fail.
    offer = move_from<Offer>(move(holder));

    // "Unpacks" the contract offer by destroying the outer resource returing its contents.
    Offer { counter_party } = move(offer);

    sender = get_txn_sender();

    // Ensure the transaction sender is the intended counter_party of the offer.
    // If this assertion fails, the transcation will fail (none of it's effects will be commited).
    // Will emmit a 401 error code with the transaction output if this assertion fails.
    assert(move(counter_party)) == move(sender), 401);

    // Create signed contract
    signed = Signed {
      holder: move(holder),
      coin: move(coin),
    }

    move_to_sender<Signed>(move(signed));

    return;
  }

  public execute_contract(counter_party: address) {
    let coin: LibraCoin.T;
    let holder: address;
    let sender: address;

    contract = move_from<Signed>(move(counter_party));

    sender = get_txn_sender();

    T { coin, holder } = move(contract);

    assert(*holder == move(sender), 401);

    return move(coin);
  }
}
