mod commands;

use self::commands::{
    AccountCommand, Command, DeployCommand, DepositCommand, DevCommand, EventsCommand,
    InitializeCommand, QueryCommand, TransitionCommand,
};
use chrono::prelude::{SecondsFormat, Utc};
use client::{client_proxy::ClientProxy, commands::*};
use rustyline::{config::CompletionType, error::ReadlineError, Config, Editor};
use std::num::NonZeroU16;
use std::{collections::HashMap, sync::Arc};
use structopt::StructOpt;

#[derive(Debug, StructOpt)]
#[structopt(
    name = "Sprint Client for Libra",
    author = "SprintLang",
    about = "Sprint Client to deploy contracts to the Libra blockchain"
)]
struct Args {
    /// Admission Control port to connect to.
    #[structopt(short = "p", long, default_value = "5000")]
    pub port: NonZeroU16,
    /// Host address/name to connect to.
    #[structopt(short = "h", long, default_value = "localhost")]
    pub host: String,
    /// Path to the generated keypair for the faucet account. The faucet mint coins.
    #[structopt(short = "m", long = "faucet-key-file-path")]
    pub faucet_account_file: Option<String>,
    /// Host that operates a faucet service
    /// If not passed, will be derived from host parameter
    #[structopt(short = "f", long)]
    pub faucet_server: Option<String>,
    /// File location from which to load mnemonic word for user account address/key generation.
    /// If not passed, a new mnemonic file will be generated by libra-wallet in the current
    /// directory.
    #[structopt(short = "n", long)]
    pub mnemonic_file: Option<String>,
    /// If set, client will sync with validator during wallet recovery.
    #[structopt(short = "r", long = "sync")]
    pub sync: bool,
}

fn main() -> std::io::Result<()> {
    let args = Args::from_args();

    let (commands, alias_to_cmd) = get_commands();

    let faucet_account_file = args.faucet_account_file.unwrap_or_else(|| "".to_string());

    let mut client_proxy = ClientProxy::new(
        &args.host,
        args.port.get(),
        &faucet_account_file,
        args.sync,
        args.faucet_server,
        args.mnemonic_file,
        None,
    )
    .map_err(|e| std::io::Error::new(std::io::ErrorKind::Other, &format!("{}", e)[..]))?;

    // Test connection to validator
    let latest_li = match client_proxy.test_validator_connection() {
        Ok(li) => li,
        Err(e) => {
            println!(
                "Not able to connect to validator at {}:{}, error {:?}",
                args.host, args.port, e
            );
            return Ok(());
        }
    };
    let ledger_info_str = format!("latest version = {}", latest_li.ledger_info().version(),);
    let _cli_info = format!(
        "Connected to validator at: {}:{}, {}",
        args.host, args.port, ledger_info_str
    );

    let config = Config::builder()
        .history_ignore_space(true)
        .completion_type(CompletionType::List)
        .auto_add_history(true)
        .build();
    let mut rl = Editor::<()>::with_config(config);

    // Creates an Account and give it money
    // TODO: In real version this should be removed and an account should be passed in.
    client_proxy.create_next_account(true).ok();
    client_proxy.create_next_account(true).ok();
    client_proxy.create_next_account(true).ok();
    client_proxy.create_next_account(true).ok();
    client_proxy.create_next_account(true).ok();

    // Command input loop
    loop {
        let readline = rl.readline("sprint > ");
        match readline {
            Ok(line) => {
                let params = parse_cmd(&line);
                if params.is_empty() {
                    continue;
                }
                match alias_to_cmd.get(&params[0]) {
                    Some(cmd) => {
                        println!("{}", Utc::now().to_rfc3339_opts(SecondsFormat::Secs, true));
                        cmd.execute(&mut client_proxy, &params);
                    }
                    None => match params[0] {
                        "quit" | "q!" => break,
                        "help" | "h" => print_help(&commands),
                        "" => continue,
                        x => println!("Unknown command: {:?}", x),
                    },
                }
            }
            Err(ReadlineError::Interrupted) => {
                println!("CTRL-C");
                break;
            }
            Err(ReadlineError::Eof) => {
                println!("CTRL-D");
                break;
            }
            Err(err) => {
                println!("Error: {:?}", err);
                break;
            }
        }
    }

    Ok(())
}

type Commands = (
    Vec<Arc<dyn Command>>,
    HashMap<&'static str, Arc<dyn Command>>,
);

/// Returns all the commands available, as well as the reverse index from the aliases to the
/// commands.
fn get_commands() -> Commands {
    let commands: Vec<Arc<dyn Command>> = vec![
        Arc::new(AccountCommand {}),
        // Arc::new(QueryCommand {}),
        // Arc::new(TransferCommand {}),
        Arc::new(DeployCommand {}),
        Arc::new(InitializeCommand {}),
        Arc::new(DepositCommand {}),
        Arc::new(TransitionCommand {}),
        Arc::new(QueryCommand {}),
        Arc::new(DevCommand {}),
        Arc::new(EventsCommand {}),
    ];

    let mut alias_to_cmd = HashMap::new();
    for command in &commands {
        for alias in command.get_aliases() {
            alias_to_cmd.insert(alias, Arc::clone(command));
        }
    }
    (commands, alias_to_cmd)
}

/// Print the help message for the client and underlying command.
fn print_help(commands: &[std::sync::Arc<dyn Command>]) {
    println!("usage: <command> <args>\n\nUse the following commands:\n");
    for cmd in commands {
        println!(
            "{} {}\n\t{}",
            cmd.get_aliases().join(" | "),
            cmd.get_params_help(),
            cmd.get_description()
        );
    }

    println!("help | h \n\tPrints this help");
    println!("quit | q! \n\tExit this client");
    println!("\n");
}
