module {{uniqueContractManagerName}} {
  {{imports}}

  resource T {
    contract: {{contractType}},
  }

  resource Request {
    holder: address,
  }

  // A limitation is that there can be only one offer at a time
  // per address, unless multple of these contracts are deployed.
  public post_offer(contract: {{contractType}}) {
    let wrapped_contract: {{contractType}};

    wrapped_contract =  T {
      contract: move(contract),
    };

    move_to_sender<T>(move(wrapped_contract));
  }

  // Will acquire the contract from the poster and destroy the offer
  // Currently only for unconditional contract, as it needs to destroy the contract of will fail.
  public acquire_from(holder: address) {
    let wrapped_contract: Self.T;
    let contract: {{contractType}};

    wrapped_contract = move_from<T>(move(holder));
    T { contract } = move(wrapped_contract);

    {{contractModuleName}}.acquire(contract);
  }

}
